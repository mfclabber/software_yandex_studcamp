def is_point_in_rectangle(rect, point):
    """
    Функция проверяет, находится ли точка внутри прямоугольника.

    rect: список из четырех кортежей (x, y), представляющих вершины прямоугольника:
          (x1, y1) - нижний левый угол
          (x2, y2) - верхний правый угол
    point: кортеж (px, py) - координаты точки.
    
    Возвращает True, если точка внутри прямоугольника, иначе False.
    """
    (x1, y1), (x2, y2) = rect[0], rect[2]  # Нижний левый и верхний правый угол

    px, py = point

    return x1 <= px <= x2 and y1 <= py <= y2

 
def find_rectangle_for_point(rectangles, point):
    """
    Функция возвращает индекс прямоугольника, в котором находится точка, или -1, если такого нет.

    rectangles: список прямоугольников, каждый из которых представляет список из четырех вершин.
    point: кортеж (px, py) - координаты точки.
    
    Возвращает индекс прямоугольника или -1.
    """
    for i, rect in enumerate(rectangles):
        if is_point_in_rectangle(rect, point):
            return i
    return -1

def find_center(x1,y1,x2,y2):
    x_min=min(x1,x2)
    y_min=min(y1,y2)
    x_max=max(x1,x2)
    y_max=max(y1,y2)
    return (x_max-x_min)/2, (y_max-y_min)/2
# Пример использования
rectangles = [
    [(1, 1), (4, 1), (4, 4), (1, 4)],  # Прямоугольник 1
    [(5, 5), (7, 5), (7, 8), (5, 8)],  # Прямоугольник 2
    [(0, 0), (2, 0), (2, 2), (0, 2)]   # Прямоугольник 3
]

point = (6, 6)  # Точка

# Найдем, к какому прямоугольнику относится точка
result = find_rectangle_for_point(rectangles, point)

if result != -1:
    print(f"Точка находится в прямоугольнике с индексом {result}")
else:
    print("Точка не принадлежит ни одному из прямоугольников")
